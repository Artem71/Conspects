Доступность - возможность пользоваться интерфейсом вне зависимости от физических и технических ограничений

Мотивация - моральная (все пользователи хотят и имеют права пользоваться нашими интерфейсами) + финансовая 
(пользователь с ограниченными возможностями такой же клиент который так же покупает наши услуги) + юредическая
(в штатах могут в суд подать из-за недоступности сервиса)

Рекомендации:
- добавление альтернативное описание изображений (alt). Иконки и вся графика на странице нуждается в текстовом сопровождении.
Декоративные графические элементы (которые не несут никакой смысловой нагрузки) необходимо скрыть от скринридеров с помощью area-hidden="true"
- Для полей ввода форм необходимо добавлять кратное описание с помощью тега label. 
- Добавлять тип данных у полей ввода
- Группировать наборы инпутов в fieldset. Так же стоит добавлять legend для описания назначения группы
- в SPA необходимо обновлять title страницы при каждом переходе (между фиктивными страницами)
- Очень важно семантично расставлять заголовки на страницы. И уровень заголовка может не коррелировать с его размером. Важный заголовок не
обязательно самый крупный (различие между тем как выглядит и тем чем является). Заголовок может иметь вложенную разметку (это норма)
- Очень важно обращать внимание на контраст. Элементы должны быть контрастными (девтулзы помогут посмотреть)
- Не стеснятся делать область клика больше (например вместо кнопки весь блок)
- Разносить важные контролы подальше друг от друга (например кнопки удаления)

Спецификация ARIA добавляет для нас особые аттрибуты, которые определяют то, каким именно будет элемент в AccessabilityTree
Основные атрибуты это роли и свойства
Роль позволяет нам классифицировать элемент на странице

-----------

Функция - возвращает значение, а процедура даёт сайд эффект (например красит кнопку)
Сигнатури - количество, тип и порядок параметров

Арность это количество параметров функции.
Сколько параметров принимает функция можно увидеть через её свойство length

Хвостовая рекурсия это когда функция вызывает саму себя, но заранее немного меняет своё тело тем самым не добавляя вызов в стек, а 
заменяя его в стеке.  В js их нет

Функции первого класса ведут себя как обычные переменные (их можно присваивать, передавать по ссылке и возвращать)
Функции первого порядка это те функции которые принимают или возвращают функции

Мемоизация - функция которая кеширует своим вычисления (в первый раз вычислит, второй возьмет из кеша)

Конвеер - функция которовая принимает набор других функций и поочередно их вызывает передавая результат по цепочке
Композиция - аналог конвеера только работа идет не слева на права, а справа на лево 

Частичное применение это подход когда мы приобразуем одну функцию в другую с меньшим числом параметров. Это огромный кусок скотча которым
мы приклеиваем то что надо
Нативный метод bind может так же приклеивать необходимые аргументы

Каррирование - преобразование одной функции с множеством параметров в множество функций с одним параметром. Это изолента - мы приматываем поочередно 
аргументы до тех пор, пока их не наберется необходимо количество